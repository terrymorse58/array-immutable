
ArrayI tests...
ArrayI: [Function: ArrayI] 
    typeof ArrayI: function

methods:

arrayI:
  const arrOld = ['f', 'r', 'e', 'd'];
  const arrI = ArrayI.arrayI(arrOld);
  // expected output: ArrayI ['f', 'r', 'e', 'd']
    arrOld: [ 'f', 'r', 'e', 'd' ] 
    arrI: ArrayI [ 'f', 'r', 'e', 'd' ]

arrayI:
  const arrO = [];
  const arrI = ArrayI.arrayI(arrOld);
  // expected output: ArrayI []
    arrO: [] 
    arrIm: ArrayI []

from:
  const hello = "hello";
  const from = ArrayI.from(hello);
  // expected output: ArrayI [ 'h', 'e', 'l', 'l', 'o' ]
    hello: "hello" 
    from: ArrayI [ 'h', 'e', 'l', 'l', 'o' ]

from2:
  const ar123 = [1,2,3];
  const from2 = ArrayI.from(ar123, x => x + x);
  // expected output: ArrayI [2, 4, 6]
    ar123: "hello" 
    from2: ArrayI [ 2, 4, 6 ]

of:
  const args = [1, 2, 3];
  const of = ArrayI.of(...args);
  // expected output: ArrayI [ 1, 2, 3 ]
    args: [ 1, 2, 3 ] 
    of: ArrayI [ 1, 2, 3 ]

prototypes:

copyWithin:
  const arrA = new ArrayI('a', 'b', 'c', 'd', 'e');
  const arrCW = arrA.copyWithin(0, 3, 4);
  // expected output: ArrayI [ 'd', 'b', 'c', 'd', 'e' ]
    arrA: ArrayI [ 'a', 'b', 'c', 'd', 'e' ] 
    arrCW: ArrayI [ 'd', 'b', 'c', 'd', 'e' ]

fill:
  const arrF = ArrayI.arrayI([1, 2, 3, 4]);
  const arrFill = arrF.fill(0,2,4);
  // expected output: ArrayI [ 1, 2, 0, 0 ]
    arrF: ArrayI [ 1, 2, 3, 4 ] 
    arrFill: ArrayI [ 1, 2, 0, 0 ]

filter:
  const words = new ArrayI('spray', 'limit', 'elite', 'exuberant',
        'destruction', 'present');
  const arrFilter = words.filter(word => word.length > 6);
  // expected output: ArrayI [ 'exuberant', 'destruction', 'present' ]
    before: ArrayI [
  'spray',
  'limit',
  'elite',
  'exuberant',
  'destruction',
  'present'
] 
    after: ArrayI [ 'exuberant', 'destruction', 'present' ]

flat:
  const arrNotFlat = ArrayI.from([1, 2, [3, [4]]]);
  const arrFlat = arrNotFlat.flat(Infinity);
  // expected output: ArrayI [ 1, 2, 3, 4 ]
    arrNoFlat: ArrayI [ 1, 2, [ 3, [ 4 ] ] ] 
    arrFlat: ArrayI [ 1, 2, 3, 4 ]

flatMap:
  const arr2 = ArrayI.arrayI(1, 2, 3, 4);
  const arrFlatMap = arr2.flatMap(x => [[x * 2]]);
  // expected output: ArrayI [ [ 2 ], [ 4 ], [ 6 ], [ 8 ] ]
    arr2: ArrayI [ 1, 2, 3, 4 ] 
    arrFlatMap: ArrayI [ [ 2 ], [ 4 ], [ 6 ], [ 8 ] ]

map:
  const numbers = new ArrayI(1, 4, 9);
  const roots = numbers.map( (num) => Math.sqrt(num));
  // expected output: ArrayI [ 1, 2, 3 ]
    numbers: ArrayI [ 1, 4, 9 ] 
    roots: ArrayI [ 1, 2, 3 ]

pop:
  const plants = new ArrayI('broccoli', 'cauliflower', 'cabbage',
        'kale', 'tomato');
  const pop = plants.pop();
  // expected output: ArrayI [ 'broccoli', 'cauliflower', 'cabbage', 'kale' ]
    plants: ArrayI [ 'broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato' ] 
    pop: ArrayI [ 'broccoli', 'cauliflower', 'cabbage', 'kale' ]

push:
  const critters = new ArrayI("pigs", "goats", "sheep", "cows");
  const push = critters.push('chickens', 'cats', 'dogs');
  // expected output: ArrayI [
          'pigs',     'goats',
          'sheep',    'cows',
          'chickens', 'cats',
          'dogs'
        ]
    critters: ArrayI [ 'pigs', 'goats', 'sheep', 'cows' ] 
    push: ArrayI [
  'pigs',     'goats',
  'sheep',    'cows',
  'chickens', 'cats',
  'dogs'
]

reverse:
  const array1 = new ArrayI('one', 'two', 'three');
  const reversed = array1.reverse();
  // expected output: ArrayI [ 'three', 'two', 'one' ]
    array1: ArrayI [ 'one', 'two', 'three' ] 
    reversed: ArrayI [ 'three', 'two', 'one' ]

shift:
  const arr123 = new ArrayI(1,2,3);
  const shift = arr123.shift();
  // expected output: ArrayI [ 2, 3 ]
    arr123: ArrayI [ 1, 2, 3 ] 
    shift: ArrayI [ 2, 3 ]

slice:
  const animals = new ArrayI('ant', 'bison', 'camel', 'duck', 'elephant');
  const slice = animals.slice(2);
  // expected output: ArrayI [ 'camel', 'duck', 'elephant' ]
    animals: ArrayI [ 'ant', 'bison', 'camel', 'duck', 'elephant' ] 
    slice: ArrayI [ 'camel', 'duck', 'elephant' ]

sort:
  const unsorted = new ArrayI('March', 'Jan', 'Feb', 'Dec');
  const sorted = unsorted.sort();
  // expected output: ArrayI [ 'Dec', 'Feb', 'Jan', 'March' ]
    unsorted: ArrayI [ 'March', 'Jan', 'Feb', 'Dec' ] 
    sorted: ArrayI [ 'Dec', 'Feb', 'Jan', 'March' ]

splice:
  const months = new ArrayI('Jan', 'March', 'April', 'June');
  const splice = months.splice(1, 0, 'Feb');
  // expected output: ArrayI [ 'Jan', 'Feb', 'March', 'April', 'June' ]
    before: ArrayI [ 'Jan', 'March', 'April', 'June' ] 
    after: ArrayI [ 'Jan', 'Feb', 'March', 'April', 'June' ]

unshift:
  const array2 = new ArrayI(1,2,3);
  const unshift = array2.unshift(4, 5);
  // expected output: ArrayI [ 4, 5, 1, 2, 3 ]
    before: ArrayI [ 1, 2, 3 ] 
    after: ArrayI [ 4, 5, 1, 2, 3 ]
