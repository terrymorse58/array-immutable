import deepCopy from"./deepcopy.mjs";export default class ArrayI extends Array{static arrayI(r=[]){if(!Array.isArray(r))throw console.error("!Array.isArray(array) array:",r),Error("ArrayI.arrayI parameter is not an array");const t=new ArrayI;return Array.prototype.push.apply(t,deepCopy(r)),t}static from(r,t,o){return this.arrayI(deepCopy(Array.from(r,t,o)))}static of(...r){return this.arrayI(deepCopy(Array.of(...arguments)))}concat(...r){return this.constructor.arrayI(deepCopy(Array.concat(...arguments)))}copyWithin(r,t,o){const s=deepCopy([...this]);return this.constructor.arrayI(s.copyWithin(...arguments))}fill(r,t,o){const s=deepCopy([...this]);return this.constructor.arrayI(s.fill(...arguments))}filter(r,t){const o=deepCopy([...this]);return this.constructor.arrayI(o.filter(...arguments))}flat(r){const t=deepCopy([...this]);return this.constructor.arrayI(t.flat(r))}flatMap(r){const t=deepCopy([...this]).flatMap(...arguments);return this.constructor.arrayI(t)}map(r,t){const o=deepCopy([...this]);return this.constructor.arrayI(o.map(...arguments))}pop(){const r=deepCopy([...this]);return r.pop(),this.constructor.arrayI(r)}push(...r){const t=deepCopy([...this]);return t.push(...arguments),this.constructor.arrayI(t)}reverse(){const r=deepCopy([...this]);return this.constructor.arrayI(r.reverse())}shift(){const r=deepCopy([...this]);return r.shift(),this.constructor.arrayI(r)}slice(r,t){const o=deepCopy([...this]);return this.constructor.arrayI(o.slice(...arguments))}sort(r){const t=deepCopy([...this]);return this.constructor.arrayI(t.sort(r))}splice(r,t,...o){const s=deepCopy([...this]);return s.splice(...arguments),this.constructor.arrayI(s)}unshift(...r){const t=deepCopy([...this]);return t.unshift(...arguments),this.constructor.arrayI(t)}}