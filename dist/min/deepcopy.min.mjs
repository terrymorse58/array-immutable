export default function deepCopy(e){let t;if(!e)return e;if(isReferenceToImmutable(e))return e;if(isDate(e))return new Date(e.getTime());const n=objectType(e);if("unknown"===n)throw Error("deepCopy: not an object or a known type!");return traverse(e,t=emptyObjectMaker[n](e)),t}function traverse(e,t){const n=objectType(e),r=keyValPairs(e),o=elementAdder[n];r.forEach(e=>{const n=e.value,r=e.key;if(isReferenceToImmutable(n))o(t,r,n);else if(isDate(n)){const e=new Date(n.getTime());o(t,r,e)}else if(isArray(n)){const e=emptyObjectMaker.array(n);o(t,r,e),traverse(n,e)}else if(isMap(n)){const e=emptyObjectMaker.map();o(t,r,e),traverse(n,e)}else if(isSet(n)){const e=emptyObjectMaker.set();o(t,r,e),traverse(n,e)}else if(isObject(n)){const e=emptyObjectMaker.object(n);o(t,r,e),traverse(n,e)}else o(t,r,n)})}function objectType(e){return isArray(e)?"array":isMap(e)?"map":isSet(e)?"set":isObject(e)?"object":"unknown"}const elementAdder={array:(e,t,n)=>{Array.prototype.push.call(e,n)},map:(e,t,n)=>{e.set(t,n)},set:(e,t,n)=>{e.add(n)},object:(e,t,n)=>{e[t]=n},unknown:()=>{}},emptyObjectMaker={array:e=>{const t=[];return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t},map:()=>new Map,set:()=>new Set,object:e=>{const t={};return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t},unknown:()=>null},keyValPairsMaker={array:(e,t)=>{e.forEach((e,n)=>{t.push({key:n,value:e})})},map:(e,t)=>{e.forEach((e,n)=>{t.push({key:n,value:e})})},set:(e,t)=>{e.forEach(e=>{t.push({key:null,value:e})})},object:(e,t)=>{for(let[n,r]of Object.entries(e))t.push({key:n,value:r})},unknown:e=>{throw console.log("keyValPairs - unrecognized object type object:",e),Error("object not a recognized type")}};function keyValPairs(e){const t=objectType(e);let n=[];return keyValPairsMaker[t](e,n),n}function isPrimitive(e){let t=typeof e;return"number"===t||"string"===t||"boolean"===t||"undefined"===t||"bigint"===t||"symbol"===t||null===e}function isRegExp(e){return e&&e instanceof RegExp}function isDate(e){return e&&e instanceof Date}function isFunction(e){return e&&e instanceof Function}function isArray(e){return e&&e instanceof Array}function isMap(e){return e&&e instanceof Map}function isWeakMap(e){return e&&e instanceof WeakMap}function isSet(e){return e&&e instanceof Set}function isWeakSet(e){return e&&e instanceof WeakSet}function isObject(e){return e&&e instanceof Object}function isReferenceToImmutable(e){return isPrimitive(e)||isFunction(e)||isRegExp(e)||isWeakMap(e)||isWeakSet(e)}