
ArrayI tests...

Deep copying is:  true .

methods:

arrayI:

  const arrOld = ['f', 'r', 'e', 'd'];
  const arrI = ArrayI.arrayI(arrOld);
  arrOld[0] = arrOld[0].toUpperCase();
    arrOld:      [ 'F', 'r', 'e', 'd' ] 
    arrI: ArrayI [ 'f', 'r', 'e', 'd' ] 
  // vs:  ArrayI [ 'f', 'r', 'e', 'd' ]

arrayI2:

  const arr0 = [];
  const arrIm = ArrayI.arrayI(arr0);
  arr.push("new stuff");
    arr0:  [ 'new stuff' ] 
    arrIm: ArrayI [] 
  // vs:   ArrayI []

arrayI3:

  const arr1 = [1,2,'a',{foo: 'foo', bar: 'bar'}];
  const arrIz = ArrayI.arrayI(arr1);
  arr1[3].bar = "BAR-BAR";
    arr1:         [ 1, 2, 'a', { foo: 'foo', bar: 'BAR-BAR' } ] 
    arrIz: ArrayI [ 1, 2, 'a', { foo: 'foo', bar: 'bar' } ] 
  // vs:   ArrayI [ 1, 2, 'a', { foo: 'foo', bar: 'bar' } ]

from:

  let hello = "hello";
  const from = ArrayI.from(hello);
  hello = hello.toUpperCase();
    hello: "HELLO" 
    from:  ArrayI [ 'h', 'e', 'l', 'l', 'o' ] 
  // vs:   ArrayI [ 'h', 'e', 'l', 'l', 'o' ]

from2:

  let ar123 = [1,2,3];
  const from2 = ArrayI.from(ar123, x => x + x);
  ar123[2] = 33333333;
    ar123: [ 1, 2, 33333333 ] 
    from2: ArrayI [ 2, 4, 6 ] 
  // vs:   ArrayI [ 2, 4, 6 ]

of:

  const args = [1, 2, 3];
  const of = ArrayI.of(...args);
  args[3] = 333333344400;
    args: [ 1, 2, 3, 333333344400 ] 
    of:   ArrayI [ 1, 2, 3 ] 
  //vs:   ArrayI [ 1, 2, 3 ]

prototypes:

copyWithin:

  const arrA = new ArrayI('a', 'b', 'c', 'd', 'e');
  const arrCW = arrA.copyWithin(0, 3, 4);
    arrA:  ArrayI [ 'a', 'b', 'c', 'd', 'e' ] 
    arrCW: ArrayI [ 'd', 'b', 'c', 'd', 'e' ] 
  // vs:   ArrayI [ 'd', 'b', 'c', 'd', 'e' ]

fill:

  const arrF = ArrayI.arrayI([1, 2, 3, 4]);
  const arrFill = arrF.fill(0,2,4);
    arrF:    ArrayI [ 1, 2, 3, 4 ] 
    arrFill: ArrayI [ 1, 2, 0, 0 ] 
  // vs:     ArrayI [ 1, 2, 0, 0 ]

filter:

  const words = new ArrayI('spray', 'limit', 'elite', 'exuberant',
        'destruction', 'present');
  const arrFilter = words.filter(word => word.length > 6);
    before: ArrayI [
  'spray',
  'limit',
  'elite',
  'exuberant',
  'destruction',
  'present'
] 
    after: ArrayI [ 'exuberant', 'destruction', 'present' ] 
  // vs:   ArrayI [ 'exuberant', 'destruction', 'present' ]

flat:

  const arrNotFlat = ArrayI.from([1, 2, [3, [4]]]);
  const arrFlat = arrNotFlat.flat(Infinity);
    arrNoFlat: ArrayI [ 1, 2, [ 3, [ 4 ] ] ] 
    arrFlat:   ArrayI [ 1, 2, 3, 4 ] 
  // vs:       ArrayI [ 1, 2, 3, 4 ]

flatMap:

  const arr2 = ArrayI.arrayI(1, 2, 3, 4);
  const arrFlatMap = arr2.flatMap(x => [[x * 2]]);
    arr2:       ArrayI [ 1, 2, 3, 4 ] 
    arrFlatMap: ArrayI [ [ 2 ], [ 4 ], [ 6 ], [ 8 ] ] 
 // vs:         ArrayI [ [ 2 ], [ 4 ], [ 6 ], [ 8 ] ]

map:

  const numbers = new ArrayI(1, 4, 9);
  const roots = numbers.map( (num) => Math.sqrt(num));
    numbers: ArrayI [ 1, 4, 9 ] 
    roots:   ArrayI [ 1, 2, 3 ] 
  // vs:     ArrayI [ 1, 2, 3 ]

pop:

  const plants = new ArrayI('broccoli', 'cauliflower', 'cabbage',
        'kale', 'tomato');
  const pop = plants.pop();
    plants: ArrayI [ 'broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato' ] 
    pop:    ArrayI [ 'broccoli', 'cauliflower', 'cabbage', 'kale' ] 
  // vs:    ArrayI [ 'broccoli', 'cauliflower', 'cabbage', 'kale' ]

push:

  const critters = new ArrayI("pigs", "goats", "sheep", "cows");
  const push = critters.push('chickens', 'cats', 'dogs');
    critters: ArrayI [ 'pigs', 'goats', 'sheep', 'cows' ] 
    push: ArrayI [
  'pigs',     'goats',
  'sheep',    'cows',
  'chickens', 'cats',
  'dogs'
] 
  // vs:  ArrayI [
  'pigs',     'goats',
  'sheep',    'cows',
  'chickens', 'cats',
  'dogs'
]

reverse:

  const array1 = new ArrayI('one', 'two', 'three');
  const reversed = array1.reverse();
    array1: ArrayI [ 'one', 'two', 'three' ] 
    reversed: ArrayI [ 'three', 'two', 'one' ] 
  // vs:      ArrayI [ 'three', 'two', 'one' ]

shift:

  const arr123 = new ArrayI(1,2,3);
  const shift = arr123.shift();
    arr123: ArrayI [ 1, 2, 3 ] 
    shift:  ArrayI [ 2, 3 ] 
  // vs:    ArrayI [ 2, 3 ]

slice:

  const animals = new ArrayI('ant', 'bison', 'camel', 'duck', 'elephant');
  const slice = animals.slice(2);
    animals: ArrayI [ 'ant', 'bison', 'camel', 'duck', 'elephant' ] 
    slice:   ArrayI [ 'camel', 'duck', 'elephant' ] 
  // vs:     ArrayI [ 'camel', 'duck', 'elephant' ]

sort:

  const unsorted = new ArrayI('March', 'Jan', 'Feb', 'Dec');
  const sorted = unsorted.sort();
    unsorted: ArrayI [ 'March', 'Jan', 'Feb', 'Dec' ] 
    sorted:   ArrayI [ 'Dec', 'Feb', 'Jan', 'March' ] 
  // vs:      ArrayI [ 'Dec', 'Feb', 'Jan', 'March' ]

splice:

  const months = new ArrayI('Jan', 'March', 'April', 'June');
  const splice = months.splice(1, 0, 'Feb');
    months: ArrayI [ 'Jan', 'March', 'April', 'June' ] 
    splice: ArrayI [ 'Jan', 'Feb', 'March', 'April', 'June' ] 
  // vs:    ArrayI [ 'Jan', 'Feb', 'March', 'April', 'June' ]

unshift:

  const array2 = new ArrayI(1,2,3);
  const unshift = array2.unshift(4, 5);
    array2:  ArrayI [ 1, 2, 3 ] 
    unshift: ArrayI [ 4, 5, 1, 2, 3 ] 
  // vs:     ArrayI [ 4, 5, 1, 2, 3 ]

Map:

  let myMap = new Map();
  myMap.set(0, 'zero');
  myMap.set(1, function foo () {console.log('i am foo')});
  let mapArr = [1,2,myMap,42];
  let mapI = ArrayI.arrayI(mapArr);
    mapArr:      [ 1, 2, Map(2) { 0 => 'zero', 1 => [Function: foo] }, 42 ] 
    mapI: ArrayI [ 1, 2, Map(2) { 0 => 'zero', 1 => [Function: foo] }, 42 ] 
 // vs:   ArrayI [ 1, 2, Map(2) { 0 => 'zero', 1 => [Function: foo] }, 42 ]

Set:

  let mySet = new Set();
  mySet.add(1);
  mySet.add(5);
  mySet.add(5);
  mySet.add('some text');
  mySet.add({a: 1, b: 2})
  let mySetArr = [1,2,'a',mySet];
  let setArrI = ArrayI.arrayI(mySetArr);
  mySet.delete('some text');
    mySetArr: [ 1, 2, 'a', Set(3) { 1, 5, { a: 1, b: 2 } } ] 
    setArrI:  ArrayI [ 1, 2, 'a', Set(4) { 1, 5, 'some text', { a: 1, b: 2 } } ] 
 // vs:       ArrayI [ 1, 2, 'a', Set(4) { 1, 5, 'some text' { a: 1, b: 2 } } ]

Elapsed time with deepCopy = true: 23 millseconds.
